/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package simulator_java;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.time.Instant;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.Timer;

/**
 *
 * @author Siddhant
 */
public class MainFrame extends javax.swing.JFrame {
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        bodies = new ArrayList<>();
        physics = new Physics2d();
        bodySize = 5;
        refreshBuffer();
        t=0;
        currentTime = Date.from(Instant.now());
        lastTime = currentTime;
        
//        initBodyGrid(5, 5, 15, 15, 5);
        
        int expectedFPS = targetFps;
        timer = new Timer((int)((1.0/expectedFPS)*1000.0), new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentTime = Date.from(Instant.now());
                float deltaTime = (currentTime.getTime()-lastTime.getTime())/1000.0f;
                physics.setDt(deltaTime);
                lastTime = currentTime;
                spawnDelay++;
                if(spawnDelay>2){
                    spawnBody();
                    spawnDelay = 0;
                }
                for(int i=0; i<4; i++){
                    physics.UpdateAll(bodies);
                }
                repaint();
            }
        });
        timer.start();
    }
    
    private void spawnBody(){
        t+=0.002f;
        color = getRainbow(t);
        bodies.add(new Body(new Vec2(50, 50), new Vec2(bodySize, bodySize), color));
        bodies.add(new Body(new Vec2(50, 60), new Vec2(bodySize, bodySize), color));
        bodies.add(new Body(new Vec2(50, 70), new Vec2(bodySize, bodySize), color));
        bodies.add(new Body(new Vec2(50, 80), new Vec2(bodySize, bodySize), color));
        bodies.add(new Body(new Vec2(50, 90), new Vec2(bodySize, bodySize), color));
        bodies.add(new Body(new Vec2(50, 100), new Vec2(bodySize, bodySize), color));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulator");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 0, 0));
        setExtendedState(6);
        setForeground(java.awt.Color.black);
        setLocation(new java.awt.Point(0, 0));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        refreshBuffer();
    }//GEN-LAST:event_formComponentResized

    private void refreshBuffer(){
        width = this.getSize().width;
        height = this.getSize().height;
        
        physics.setSize(width, height, bodySize);
        
        buffer = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);        
        gbuffer = buffer.getGraphics();
        gbuffer.setColor(Color.blue);
    }
    
    private void initBodyGrid(int x0, int y0, int column, int row, int gap){
        for(int i=x0; i<column+x0; i++){
            for(int j=y0; j<row+y0; j++){
                bodies.add(new Body(new Vec2(i*(bodySize*2+gap), j*(bodySize*2+gap)), new Vec2(bodySize, bodySize), new Color(random.nextFloat(), random.nextFloat(), random.nextFloat())));
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    private void paintBuffer(){
        gbuffer.clearRect(0, 0, width, height);
        for (Body body : bodies) {
            gbuffer.setColor(body.color);
            gbuffer.fillOval((int)(body.position.x-body.size.x), (int)(body.position.y-body.size.y), (int)body.size.x*2, (int)body.size.y*2);
        }

        gbuffer.setColor(Color.white);
        frameCount++;
        if(frameCount >= targetFps){
            fps = frameCount / ((Date.from(Instant.now()).getTime() - lastTime.getTime())/1000.0f) / 100.0f;
            frameCount = 0;
            if(fps<60){
                spawn--;
            }
        }
        gbuffer.drawString("Count: "+bodies.size(), width-150, 50);
        gbuffer.drawString("FPS: "+(int)fps, width-150, 100);

    }
    
    @Override
    public void paint(Graphics g){
        paintBuffer();
        g.drawImage(buffer, 0, 0, this);
    }
    
    public Color getRainbow(double t)
        {
            double r = (double)Math.sin(t);
            double g = (double)Math.sin(t + 0.66f * Math.PI);
            double b = (double)Math.sin(t + 1.32f * Math.PI);
            return new Color((int)(255.0f * r * r), (int)(255.0f * g * g), (int)(255.0f * b * b));
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private BufferedImage buffer;
//    private Graphics2D gbuffer;
    private Graphics gbuffer;
    private int height;
    private int width;
    private Random random = new Random();
    private Timer timer;
    private List<Body> bodies;
    private Physics2d physics;
    private int bodySize;
    private float t;
    private Color color;
    private float fps=0;
    private int frameCount = 0;
    private int targetFps=60;
    private Date currentTime;
    private Date lastTime;
    private int spawn = 2;
    private int spawnDelay = 0;
}